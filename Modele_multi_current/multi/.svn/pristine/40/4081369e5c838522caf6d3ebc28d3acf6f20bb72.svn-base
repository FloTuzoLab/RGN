//
//  Cell.cpp
//  Cell_Evolution
//
//  Created by Florian on 02/03/2018.
//  Copyright Â© 2018 Florian. All rights reserved.
//

#include "Cell.hpp"

using namespace std;

/*  ##Constructors##    */


    /*  #Default Constructor: only some basic physical properties defined#  */

Cell::Cell() /*These two features are not subject to evolution and make no sense when fixed to 0; hence, it is better to define them even in the default construtor.*/ :
/*1.Properties of the cell*/

//Fixed:
//i.Chemico-physical properties
m_permeabilityCell(pow(10,-6)),                                   //Permeability of the cell membrane
m_allometryProductionAlpha(1),         //Allometry of energy production: how scale the production of energy per nutrient unit with cell volume
m_allometryBasalAlpha(1),                   //Allometry of basal metabolism: how scale the cost of basal metabolism with cell volume
m_etaNutrientToEnergy(30),                                          //Conversion rate between a nutrient and energy
m_etaNutrientToGarbage(1),                       //Conversion rate between a nutrient and a garbage
m_metaboliteCost{1,1,1},        //Cost for :{"Growth","Maintenance","Public goods"}
m_synthesisDuration(1000),

//Variable:
//ii.Transcription rate of genes                                    //Further, these rates will rely on BSTF dynamics
m_tauGrowthGeneTranscription(1),
m_tauMaintenanceGeneTranscription(1),
m_tauPublicGoodsGeneTranscription(1),
//iii.Traduction rate of transcripts
m_tauTraduction(5),
//iv.Degradation rate of gene products
m_tauDegradationTranscript(0.1),               //Same degradation rate for each transcript
m_tauDegradationProtein(1),                     //Same degradation rate for each protein
//v.Size of the cell
m_volumeCell(100),
//vi.Current time since DNA synthesis beginning
m_timeSinceSynthesisBeginning(0),

/*2.Content of the cell*/

//i.Energetic content
m_numberNutrientUnits(0),                                           //In a first time, nutrient units are immediately consumed
m_numberEnergyUnits(0),                                             //In a first time, energy units are immediately consumed
//ii.By-product content: garbage
m_numberGarbageUnits(0),
//iii.Transcripts content
m_numberGrowthTranscripts(0),
m_numberMaintenanceTranscripts(0),
m_numberPublicGoodsTranscripts(0),
//iv.Proteins content
m_numberGrowthProteins(0),
m_numberMaintenanceProteins(0),
m_numberPublicGoodsProteins(0),
//v.Metabolites content
m_numberMaintenanceMetabolites(0),
m_numberPublicGoodsMetabolites(0),

/*3.Genetics*/

//i.Cell volume at mitosis
m_volumeProportionDescendant(0.1),
m_garbageProportionDescendant(0.5),
m_volumeCellMitosis(500)                              //In principle, should disappear when genes are defined.
{
    //rnd=randomSimulation;
    for (int g=0;g<10;g++){
        m_numberOtherTranscripts[g]=0;
        m_numberOtherProteins[g]=0;
    }
}



    /* #Total free Constructor# */

Cell::Cell(gsl_rng *randomSimulation,
           double permeability,
           double allometryProductionCoefficient,
           double allometryBasalCoefficient,
           double etaNutrientToGarbage,
           int synthesisDuration,
           double tauGrowthGeneTranscription,
           double tauMaintenanceGeneTranscription,
           double tauPublicGoodsGeneTranscription,
           double tauTraduction,
           double tauDegradationTranscript,
           double tauDegradationProtein,
           int metaboliteCost[3],
           int numberGarbageUnits,
           double cellVolume,
           int timeSinceSynthesisBeginning,
           int numberGrowthTranscripts,
           int numberMaintenanceTranscripts,
           int numberPublicGoodsTranscripts,
           int numberOtherTranscripts [10],
           int numberGrowthProteins,
           int numberMaintenanceProteins,
           int numberPublicGoodsProteins,
           int numberMaintenanceMetabolites,
           int numberPublicGoodsMetabolites,
           int numberOtherProteins [10],
           double volumeProportionDescendant,
           double garbageProportionDescendant,
           double volumeCellMitosis):

    /*1.Properties of the cell*/

//Fixed:
    //i.Chemico-physical properties
    m_permeabilityCell(permeability),                                   //Permeability of the cell membrane
    m_allometryProductionAlpha(allometryProductionCoefficient),         //Allometry of energy production: how scale the production of energy per nutrient unit with cell volume
    m_allometryBasalAlpha(allometryBasalCoefficient),                   //Allometry of basal metabolism: how scale the cost of basal metabolism with cell volume
    m_etaNutrientToEnergy(30),                                          //Conversion rate between a nutrient and energy
    m_etaNutrientToGarbage(etaNutrientToGarbage),                       //Conversion rate between a nutrient and a garbage
    m_synthesisDuration(synthesisDuration),
    m_metaboliteCost{metaboliteCost[0],metaboliteCost[1],metaboliteCost[2]},        //Cost for :{"Growth","Maintenance","Public goods"}

//Variable:
    //ii.Transcription rate of genes                                    //Further, these rates will rely on BSTF dynamics
    m_tauGrowthGeneTranscription(tauGrowthGeneTranscription),
    m_tauMaintenanceGeneTranscription(tauMaintenanceGeneTranscription),
    m_tauPublicGoodsGeneTranscription(tauPublicGoodsGeneTranscription),
    //iii.Traduction rate of transcripts
    m_tauTraduction(tauTraduction),
    //iv.Degradation rate of gene products
    m_tauDegradationTranscript(tauDegradationTranscript),               //Same degradation rate for each transcript
    m_tauDegradationProtein(tauDegradationProtein),                     //Same degradation rate for each protein
    //v.Size of the cell
    m_volumeCell(cellVolume),
    m_timeSinceSynthesisBeginning(timeSinceSynthesisBeginning),

    /*2.Content of the cell*/

    //i.Energetic content
    m_numberNutrientUnits(0),                                           //In a first time, nutrient units are immediately consumed
    m_numberEnergyUnits(0),                                             //In a first time, energy units are immediately consumed
    //ii.By-product content: garbage
    m_numberGarbageUnits(numberGarbageUnits),
    //iii.Transcripts content
    m_numberGrowthTranscripts(numberGrowthTranscripts),
    m_numberMaintenanceTranscripts(numberMaintenanceTranscripts),
    m_numberPublicGoodsTranscripts(numberPublicGoodsTranscripts),
    //iv.Proteins content
    m_numberGrowthProteins(numberGrowthProteins),
    m_numberMaintenanceProteins(numberMaintenanceProteins),
    m_numberPublicGoodsProteins(numberPublicGoodsProteins),
    //v.Maintenance metabolites content
    m_numberMaintenanceMetabolites(numberMaintenanceMetabolites),
    m_numberPublicGoodsMetabolites(numberPublicGoodsMetabolites),

    /*3.Genetics*/

    //i.Cell volume at mitosis
    m_volumeProportionDescendant(volumeProportionDescendant),
    m_garbageProportionDescendant(garbageProportionDescendant),
    m_volumeCellMitosis(volumeCellMitosis)                              //In principle, should disappear when genes are defined.
{
    rnd=randomSimulation;
    for (int g=0;g<10;g++){
        m_numberOtherTranscripts[g]=numberOtherTranscripts[g];
        m_numberOtherProteins[g]=numberOtherProteins[g];
    }
}


// #Constructor using a full pre-defined cell# //

Cell::Cell(gsl_rng *randomSimulation, const Cell& m_cell):
    /*1.Properties of the cell*/

//Fixed:
    //i.Chemico-physical properties
    m_permeabilityCell(m_cell.m_permeabilityCell),                                                 //Permeability of the cell membrane
    m_allometryProductionAlpha(m_cell.m_allometryProductionAlpha),                                 //Allometry of energy production: how scale the production of energy per nutrient unit with cell volume
    m_allometryBasalAlpha(m_cell.m_allometryBasalAlpha),                                           //Allometry of basal metabolism: how scale the cost of basal metabolism with cell volume
    m_etaNutrientToEnergy(m_cell.m_etaNutrientToEnergy),                                           //Conversion rate between a nutrient and energy
    m_etaNutrientToGarbage(m_cell.m_etaNutrientToGarbage),                                         //Conversion rate between a nutrient and a garbage
    m_metaboliteCost{m_cell.m_metaboliteCost[0],m_cell.m_metaboliteCost[1],m_cell.m_metaboliteCost[2]},        //Cost for :{"Growth","Maintenance","Public goods"}
    m_synthesisDuration(m_cell.m_synthesisDuration),

//Variable:
    //ii.Transcription rate of genes                                                               //Further, these rates will rely on BSTF dynamics
    m_tauGrowthGeneTranscription(m_cell.m_tauGrowthGeneTranscription),
    m_tauMaintenanceGeneTranscription(m_cell.m_tauMaintenanceGeneTranscription),
    m_tauPublicGoodsGeneTranscription(m_cell.m_tauPublicGoodsGeneTranscription),
    //iii.Traduction rate of transcripts
    m_tauTraduction(m_cell.m_tauTraduction),
    //iv.Degradation rate of gene products
    m_tauDegradationTranscript(m_cell.m_tauDegradationTranscript),                                 //Same degradation rate for each transcript
    m_tauDegradationProtein(m_cell.m_tauDegradationProtein),                                       //Same degradation rate for each protein
    //v.Size of the cell
    m_volumeCell(m_cell.m_volumeCell),
    m_timeSinceSynthesisBeginning(m_cell.m_timeSinceSynthesisBeginning),

    /*2.Content of the cell*/

    //i.Energetic content
    m_numberNutrientUnits(m_cell.m_numberNutrientUnits),                                           //In a first time, nutrient units are immediately consumed
    m_numberEnergyUnits(m_cell.m_numberEnergyUnits),                                               //In a first time, energy units are immediately consumed
    //ii.By-product content: garbage
    m_numberGarbageUnits(m_cell.m_numberGarbageUnits),
    //iii.Transcripts content
    m_numberGrowthTranscripts(m_cell.m_numberGrowthTranscripts),
    m_numberMaintenanceTranscripts(m_cell.m_numberMaintenanceTranscripts),
    m_numberPublicGoodsTranscripts(m_cell.m_numberPublicGoodsTranscripts),
    //iv.Proteins content
    m_numberGrowthProteins(m_cell.m_numberGrowthProteins),
    m_numberMaintenanceProteins(m_cell.m_numberMaintenanceProteins),
    m_numberPublicGoodsProteins(m_cell.m_numberPublicGoodsProteins),
    //v.Metabolites content
    m_numberMaintenanceMetabolites(m_cell.m_numberMaintenanceMetabolites),
    m_numberPublicGoodsMetabolites(m_cell.m_numberPublicGoodsMetabolites),

    /*3.Genetics*/

    //i.Cell volume at mitosis
    m_volumeProportionDescendant(m_cell.m_volumeProportionDescendant),
    m_garbageProportionDescendant(m_cell.m_garbageProportionDescendant),
    m_volumeCellMitosis(m_cell.m_volumeCellMitosis)                                                //In principle, should disappear when genes are defined.
{
    rnd=randomSimulation;
    for (int g=0;g<10;g++){
        m_numberOtherTranscripts[g]=m_cell.m_numberOtherTranscripts[g];
        m_numberOtherProteins[g]=m_cell.m_numberOtherProteins[g];
    }
}
/*
Cell::~Cell()
{
    delete rnd;
}
*/

void Cell::operator=(const Cell& m_cell)
{
    m_permeabilityCell=(m_cell.m_permeabilityCell);                                                 //Permeability of the cell membrane
    m_allometryProductionAlpha=(m_cell.m_allometryProductionAlpha);                                 //Allometry of energy production: how scale the production of energy per nutrient unit with cell volume
    m_allometryBasalAlpha=(m_cell.m_allometryBasalAlpha);                                           //Allometry of basal metabolism: how scale the cost of basal metabolism with cell volume
    m_etaNutrientToEnergy=(m_cell.m_etaNutrientToEnergy);                                           //Conversion rate between a nutrient and energy
    m_etaNutrientToGarbage=(m_cell.m_etaNutrientToGarbage);                                         //Conversion rate between a nutrient and a garbage
    m_metaboliteCost[0]=m_cell.m_metaboliteCost[0];
    m_metaboliteCost[1]=m_cell.m_metaboliteCost[1];
    m_metaboliteCost[2]=m_cell.m_metaboliteCost[2];        //Cost for :{"Growth","Maintenance","Public goods"}
    m_synthesisDuration=(m_cell.m_synthesisDuration);
    
    //Variable:
    //ii.Transcription rate of genes                                                               //Further, these rates will rely on BSTF dynamics
    m_tauGrowthGeneTranscription=(m_cell.m_tauGrowthGeneTranscription);
    m_tauMaintenanceGeneTranscription=(m_cell.m_tauMaintenanceGeneTranscription);
    m_tauPublicGoodsGeneTranscription=(m_cell.m_tauPublicGoodsGeneTranscription);
    //iii.Traduction rate of transcripts
    m_tauTraduction=(m_cell.m_tauTraduction);
    //iv.Degradation rate of gene products
    m_tauDegradationTranscript=(m_cell.m_tauDegradationTranscript);                                 //Same degradation rate for each transcript
    m_tauDegradationProtein=(m_cell.m_tauDegradationProtein);                                       //Same degradation rate for each protein
    //v.Size of the cell
    m_volumeCell=(m_cell.m_volumeCell);
    m_timeSinceSynthesisBeginning=(m_cell.m_timeSinceSynthesisBeginning);
    
    /*2.Content of the cell*/
    
    //i.Energetic content
    m_numberNutrientUnits=(m_cell.m_numberNutrientUnits);                                           //In a first time, nutrient units are immediately consumed
    m_numberEnergyUnits=(m_cell.m_numberEnergyUnits);                                               //In a first time, energy units are immediately consumed
    //ii.By-product content: garbage
    m_numberGarbageUnits=(m_cell.m_numberGarbageUnits);
    //iii.Transcripts content
    m_numberGrowthTranscripts=(m_cell.m_numberGrowthTranscripts);
    m_numberMaintenanceTranscripts=(m_cell.m_numberMaintenanceTranscripts);
    m_numberPublicGoodsTranscripts=(m_cell.m_numberPublicGoodsTranscripts);
    //iv.Proteins content
    m_numberGrowthProteins=(m_cell.m_numberGrowthProteins);
    m_numberMaintenanceProteins=(m_cell.m_numberMaintenanceProteins);
    m_numberPublicGoodsProteins=(m_cell.m_numberPublicGoodsProteins);
    //v.Maintenance metabolites content
    m_numberMaintenanceMetabolites=(m_cell.m_numberMaintenanceMetabolites);
    m_numberPublicGoodsMetabolites=(m_cell.m_numberPublicGoodsMetabolites);
    
    /*3.Genetics*/
    
    //i.Cell volume at mitosis
    m_volumeProportionDescendant=(m_cell.m_volumeProportionDescendant);
    m_garbageProportionDescendant=(m_cell.m_garbageProportionDescendant);
    m_volumeCellMitosis=(m_cell.m_volumeCellMitosis); //In principle, should disappear when genes are defined.
    rnd=m_cell.rnd;
    
    for (int g=0;g<10;g++){
        m_numberOtherTranscripts[g]=m_cell.m_numberOtherTranscripts[g];
        m_numberOtherProteins[g]=m_cell.m_numberOtherProteins[g];
    }
}

void Cell::BuildDaughterCell(Cell& _cell)
{
    
    m_volumeCell=(_cell.m_volumeCell);
    m_timeSinceSynthesisBeginning=(_cell.m_timeSinceSynthesisBeginning);
    
    /*2.Content of the cell*/
    
    //i.Energetic content
    m_numberNutrientUnits=(_cell.m_numberNutrientUnits);                                           //In a first time, nutrient units are immediately consumed
    m_numberEnergyUnits=(_cell.m_numberEnergyUnits);                                               //In a first time, energy units are immediately consumed
    //ii.By-product content: garbage
    m_numberGarbageUnits=(_cell.m_numberGarbageUnits);
    //iii.Transcripts content
    m_numberGrowthTranscripts=(_cell.m_numberGrowthTranscripts);
    m_numberMaintenanceTranscripts=(_cell.m_numberMaintenanceTranscripts);
    m_numberPublicGoodsTranscripts=(_cell.m_numberPublicGoodsTranscripts);
    //iv.Proteins content
    m_numberGrowthProteins=(_cell.m_numberGrowthProteins);
    m_numberMaintenanceProteins=(_cell.m_numberMaintenanceProteins);
    m_numberPublicGoodsProteins=(_cell.m_numberPublicGoodsProteins);
    //v.Maintenance metabolites content
    m_numberMaintenanceMetabolites=(_cell.m_numberMaintenanceMetabolites);
    m_numberPublicGoodsMetabolites=(_cell.m_numberPublicGoodsMetabolites);
    
    /*3.Genetics*/
    
    //i.Cell volume at mitosis
    m_volumeCellMitosis=(_cell.m_volumeCellMitosis);
}

/* ##Other methods## */


    // #Printing the state of the cell# //

void Cell::PrintCell(){
    cout << m_permeabilityCell << endl;
    cout << m_allometryProductionAlpha << endl;
    cout << m_allometryBasalAlpha << endl;
    cout << m_numberNutrientUnits << endl;
    cout << m_volumeCell << endl;
    cout << m_numberGarbageUnits << endl;
}

    /* #Operations on the cell# */

        /* #1.Transcripts Production# */

void Cell::TranscriptsDynamics(double delta_t){
    m_numberGrowthTranscripts-=gsl_ran_binomial(rnd,m_tauDegradationTranscript*delta_t,m_numberGrowthTranscripts);
    m_numberGrowthTranscripts+=gsl_ran_poisson(rnd,m_tauGrowthGeneTranscription*delta_t);
    //cout<<m_numberGrowthTranscripts<<endl;//not needed: just used to see if it works
    m_numberMaintenanceTranscripts-=gsl_ran_binomial(rnd,m_tauDegradationTranscript*delta_t,m_numberMaintenanceTranscripts);
    m_numberMaintenanceTranscripts+=gsl_ran_poisson(rnd,m_tauMaintenanceGeneTranscription*delta_t);
    
    m_numberPublicGoodsTranscripts-=gsl_ran_binomial(rnd,m_tauDegradationTranscript*delta_t,m_numberPublicGoodsTranscripts);
    m_numberPublicGoodsTranscripts+=gsl_ran_poisson(rnd,m_tauPublicGoodsGeneTranscription*delta_t);
}

        /* #2.Proteins Production# */

void Cell::ProteinsDynamics(double delta_t){
    m_numberGrowthProteins-=gsl_ran_binomial(rnd,m_tauDegradationProtein*delta_t,m_numberGrowthProteins);
    m_numberGrowthProteins+=gsl_ran_binomial(rnd,m_tauTraduction*delta_t,m_numberGrowthTranscripts);
    //cout << m_numberGrowthProteins << endl;
    m_numberMaintenanceProteins-=gsl_ran_binomial(rnd,m_tauDegradationProtein*delta_t,m_numberMaintenanceProteins);
    m_numberMaintenanceProteins+=gsl_ran_binomial(rnd,m_tauTraduction*delta_t,m_numberMaintenanceTranscripts);
    
    m_numberPublicGoodsProteins-=gsl_ran_binomial(rnd,m_tauDegradationProtein*delta_t,m_numberPublicGoodsProteins);
    m_numberPublicGoodsProteins+=gsl_ran_binomial(rnd,m_tauTraduction*delta_t,m_numberPublicGoodsTranscripts);
}

        /* #3.Nutrient uptake# */

            // #i.Standard nutrient uptake#
int Cell::SetNutrientAfterStandardNutrientDiffusion(double delta_t, double concentrationNutrientStandard){
    int nutrientUptake = m_permeabilityCell*VtoSAconversion(m_volumeCell)*delta_t*(concentrationNutrientStandard);
    m_numberNutrientUnits+=nutrientUptake;
    return (nutrientUptake);
}
            // #ii.Revealed nutrient uptake#
int Cell::SetNutrientAfterRevealedNutrientDiffusion(double delta_t, double concentrationNutrientRevealed){
    int nutrientUptake = m_permeabilityCell*VtoSAconversion(m_volumeCell)*delta_t*(concentrationNutrientRevealed);
    m_numberNutrientUnits+=nutrientUptake;
    cout << nutrientUptake << endl;
    return (nutrientUptake);
}

        /* #4.Energy Production and collateral Garbage production# */
void Cell::EnergyProduction(){
    m_numberGarbageUnits+=pow(m_etaNutrientToGarbage,m_allometryProductionAlpha)*m_numberNutrientUnits; //Note: Here, there's an allometric coefficient representing the mitochondrial efficiency in the nutrient treatment which may also be linked to their concentration.
    m_numberEnergyUnits+=pow(m_etaNutrientToEnergy,m_allometryProductionAlpha)*m_numberNutrientUnits;   //Same allometric coefficient.
    m_numberNutrientUnits=0;
}

        /* #5.Energy use# */

            // #i.Withdrawal by the basal metabolism
void Cell::BasalMetabolismWithdrawal(double SAcalibration,double m_basalMetabolismSAcalibration){
    m_numberEnergyUnits-=m_basalMetabolismSAcalibration*pow(VtoSAconversion(m_volumeCell)/SAcalibration,m_allometryBasalAlpha);
}

                // #ii.a)Cell growth
void Cell::Growth(int totalNumberProteins, int tauProductionMetabolites){
    double growthFractionProteins=Proportion(m_numberGrowthProteins,totalNumberProteins);
    if (m_metaboliteCost[0]!=0){
    int numberPhospholipids((m_numberEnergyUnits/m_metaboliteCost[0])*growthFractionProteins);
    //cout << numberPhospholipids << endl;
    m_volumeCell=SAtoVconversion(VtoSAconversion(m_volumeCell)+numberPhospholipids*2*pow(10,-7));
    }
}

                // #ii.b)Cell maintenance molecule production
void Cell::MaintenanceMetabolitesProduction(int totalNumberProteins, int tauProductionMetabolites){
    double maintenanceFractionProteins=Proportion(m_numberMaintenanceProteins,totalNumberProteins);
    if (m_metaboliteCost[1]!=0){
    m_numberMaintenanceMetabolites=(m_numberEnergyUnits/m_metaboliteCost[1])*maintenanceFractionProteins;
    }
}

                // #ii.c)Cell Public Goods production
void Cell::PublicGoodsMetabolitesProduction(int totalNumberProteins, int tauProductionMetabolites){
    double publicGoodsFractionProteins=Proportion(m_numberPublicGoodsProteins,totalNumberProteins);
    if (m_metaboliteCost[2]!=0){
        m_numberPublicGoodsMetabolites=(m_numberEnergyUnits/m_metaboliteCost[2])*publicGoodsFractionProteins;
    }
}

            // #ii)Whole energy allocation process
void Cell::EnergyAllocation(){
    int totalNumberTraitProteins=m_numberGrowthProteins+m_numberMaintenanceProteins+m_numberPublicGoodsProteins;
    int tauProductionMetabolites=1000;
    Growth(totalNumberTraitProteins,tauProductionMetabolites);
    MaintenanceMetabolitesProduction(totalNumberTraitProteins,tauProductionMetabolites);
    PublicGoodsMetabolitesProduction(totalNumberTraitProteins,tauProductionMetabolites);
    m_numberEnergyUnits=0;
}

        /* #6.Phenotype effects */

            // #i.Maintenance metabolites effect# //
void Cell::GarbageNeutralization(){
    
}

            // #ii.Public goods release# //
int Cell::PublicgoodsRelease(){
    int numberPublicGoodsReleased=m_numberPublicGoodsMetabolites;
    m_numberPublicGoodsMetabolites=0;
    return(numberPublicGoodsReleased);
}

        /* #7.Mitosis checking */

            // #i.Checking if mitosis checkpoint reached#
bool Cell::ReplicationCheckpoint(){
    return(VtoSAconversion(m_volumeCell)>=VtoSAconversion(m_volumeCellMitosis));
}

            // #ii.Processing of DNA synthesis#
void Cell::SynthesisProcessing(){
    if (ReplicationCheckpoint()){
        m_timeSinceSynthesisBeginning+=1;
    }
}

            // #iii.Checking if mitosis checkpoint reached#
bool Cell::MitosisCheckpoint(){
    return (m_timeSinceSynthesisBeginning>=m_synthesisDuration);
}

bool Cell::MitosisTriggering(){
    SynthesisProcessing();
    return (MitosisCheckpoint());
}


        /* #8.Death checking */
bool Cell::DeathTest(double delta_t){
    long double concentrationGarbageUnits=ConcentrationCalculus(m_numberGarbageUnits,m_volumeCell);
    double survivalProbability=pow(exp(-concentrationGarbageUnits/(pow(10,10)*1/100)),20.0/3600);
    int deathTest=gsl_ran_binomial(rnd, survivalProbability, 1);
    return(deathTest==0);
}

    /* #Getting the settings# */

double Cell::GetPermeabilityCell(){
    return(m_permeabilityCell);
}

double Cell::GetAllometryProductionAlpha(){
    return(m_allometryProductionAlpha);
}

double Cell::GetAllometryBasalAlpha(){
    return(m_allometryBasalAlpha);
}

double Cell::GetEtaNutrientToGarbage(){
    return(m_etaNutrientToGarbage);
}

double Cell::GetTauGrowthGeneTranscription(){
    return(m_tauGrowthGeneTranscription);
}

double Cell::GetTauMaintenanceGeneTranscription(){
    return(m_tauMaintenanceGeneTranscription);
}

double Cell::GetTauPublicGoodsGeneTranscription(){
    return(m_tauPublicGoodsGeneTranscription);
}

double Cell::GetTauDegradationTranscript(){
    return(m_tauDegradationTranscript);
}

double Cell::GetTauDegradationProtein(){
    return(m_tauDegradationProtein);
}

int Cell::GetMetaboliteCost(int p){
    return(m_metaboliteCost[p]);
}

double Cell::GetVolumeCell(){
    return(m_volumeCell);
}

long int Cell::GetNumberGarbageUnits(){
    return(m_numberGarbageUnits);
}

int Cell::GetTranscripts(char t){
    if (t=='g'){
        return(m_numberGrowthTranscripts);
    }
    else if (t=='m'){
        return(m_numberMaintenanceTranscripts);
    }
    else if (t=='p'){
        return(m_numberPublicGoodsTranscripts);
    }
    else{
        return(0);
    }
}

int Cell::GetOtherTranscripts(int g){
        return(m_numberOtherTranscripts[g]);
}

int Cell::GetProteins(char t){
    if (t=='g'){
        return(m_numberGrowthProteins);
    }
    else if (t=='m'){
        return(m_numberMaintenanceProteins);
    }
    else if (t=='p'){
        return(m_numberPublicGoodsProteins);
    }
    else{
        return(0);
    }
}

int Cell::GetOtherProteins(int g){
        return(m_numberOtherProteins[g]);
}

//May be provisory getting the size of the cell at mitosis

double Cell::GetMitosisSize(){
    return(m_volumeCellMitosis);
}

void Cell::SetGarbageUnits(double numberGarbageunits){
    m_numberGarbageUnits+=numberGarbageunits;
}

//General methods out of the class

double VtoSAconversion(double V_cell){
    return pow((V_cell*V_cell*36*M_PI),1.0/3);
}

double SAtoVconversion(double SA_cell){
    return pow(SA_cell,3.0/2)/(6*pow(M_PI,1.0/2));
}
           
long double ConcentrationCalculus(long int MoleculeNumber, double CellVolume){
    return(MoleculeNumber/CellVolume);
}
           
double Proportion(double sub, double total){
    return(sub/total);
}
           
