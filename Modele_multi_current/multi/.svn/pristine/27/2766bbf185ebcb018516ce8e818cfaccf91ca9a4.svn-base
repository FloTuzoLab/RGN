//
//  Cell.hpp
//  Cell_Evolution
//
//  Created by Florian on 02/03/2018.
//  Copyright Â© 2018 Florian. All rights reserved.
//

#ifndef Cell_hpp
#define Cell_hpp

#include <iostream>
#include <cstdlib>
#include <string>

#include <math.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>
#include <random>

#include "Allele.hpp"

class Cell
{
public:
    
    /* ###Methods### */
    
    
        /* ##Constructors## */
    
    
            // #Default constructor# //  //Need to see if not counterproductive by introducing a risk of non-working situations
            Cell();
    
            // #Total free constructor# //
            Cell(gsl_rng *randomSimulation,
                 double permeability,
                 double allometryProductionCoefficient,
                 double allometryBasalCoefficient,
                 double etaNutrientToGarbage,
                 int synthesisDuration,
                 double tauGrowthGeneTranscription,
                 double tauMaintenanceGeneTranscription,
                 double tauPublicGoodsGeneTranscription,
                 double tauTraduction,
                 double tauDegradationTranscript,
                 double tauDegradationProtein,
                 int proteinCost[3],
                 int numberGarbageUnits,
                 double cellVolume,
                 int m_timeSinceSynthesisBeginning,
                 int numberGrowthTranscripts,
                 int numberMaintenanceTranscripts,
                 int numberPublicGoodsTranscripts,
                 int numberOtherTranscripts [10],
                 int m_numberGrowthProteins,
                 int m_numberMaintenanceProteins,
                 int numberPublicGoodsProteins,
                 int numberMaintenanceMetabolites,
                 int numberPublicGoodsMetabolites,
                 int numberOtherProteins [10],
                 double volumeProportionDescendant,
                 double garbageProportionDescendant,
                 double volumeCellMitosis
                 );
    
            // #Constructor using a full pre-defined cell# //
            Cell(gsl_rng *randomSimulation, const Cell& m_cell);
    
            void operator=(const Cell& m_cell);
    
            // #Outside/pseudo constructor using some of the features of a pre-defined cell, i.e. those which are heritable by a daughter, and modifying those of the mother cell which concern products apportioned with respect to the post-mitosis volumes.# //
            void BuildDaughterCell(Cell& m_cell);
    
        /* ##Destructor## */
    
        //~Cell();// At least needed to delete the pointer of random number.
    
    
        /* ##Other methods## */
    
    
            // #Printing the state of the cell# //
            void PrintCell();
    
            // #Operations on the cell# //
    
            /* #1.Transcripts production# */
            void TranscriptsDynamics(double delta_t);// In principle, need for a general function with balance of transcript
            /* #2.Proteins production# */
            void ProteinsDynamics(double delta_t);// In principle, need for a general function with balance of proteins
            /* #3.Nutrient uptake# */
                // #i.Standard nutrient uptake#
                int SetNutrientAfterStandardNutrientDiffusion(double delta_t, double concentrationNutrientStandard); //return standard nutrient uptake by a cell
                // #ii.Revealed nutrient uptake#
                int SetNutrientAfterRevealedNutrientDiffusion(double delta_t, double concentrationRevealedStandard); //return revealed nutrient uptake by a cell
            /* #4.Energy production# */
            void EnergyProduction();
            /* #5.Energy use# */
                // #i.Withdrawal by the basal metabolism
                void BasalMetabolismWithdrawal(double SAcalibration,double m_basalMetabolismSAcalibration);
                    // #ii.a)Cell growth
                    void Growth(int totalNumberProteins, int tauProductionMetabolites); //via phospholipids production
                    // #ii.b)Cell maintenance molecule production
                    void MaintenanceMetabolitesProduction(int totalNumberProteins, int tauProductionMetabolites);
                    // #ii.c)Cell Public Goods production
                    void PublicGoodsMetabolitesProduction(int totalNumberProteins, int tauProductionMetabolites);
                // #ii. Whole energy allocation process
                void EnergyAllocation();
    
            /* #6.Phenotype effects */
                // #i.Maintenance metabolites effect# //
                void GarbageNeutralization();
                // #ii.Public goods release# //
                int PublicgoodsRelease();
            /* #7.Mitosis checking */
                // #i.Checking if replication checkpoint reached#
                bool ReplicationCheckpoint();
                // #ii.Processing of DNA synthesis#
                void SynthesisProcessing();
                // #iii.Checking if mitosis checkpoint reached#
                bool MitosisCheckpoint();
            bool MitosisTriggering();
            /* #8.Death checking */
                bool DeathTest(double delta_t);
    
            // #Getting the settings# //
    
            double GetPermeabilityCell();
            double GetAllometryProductionAlpha();
            double GetAllometryBasalAlpha();
            double GetEtaNutrientToGarbage();
            double GetTauGrowthGeneTranscription();
            double GetTauMaintenanceGeneTranscription();
            double GetTauPublicGoodsGeneTranscription();
            double GetTauDegradationTranscript();
            double GetTauDegradationProtein();
            int GetMetaboliteCost(int p);
            long int GetNumberGarbageUnits();
            double GetVolumeCell();
            int GetTranscripts(char t);
            int GetOtherTranscripts(int g);//t-ieth type of transcript
            int GetProteins(char t);
            int GetOtherProteins(int g);//p-ieth type of protein
            double GetMitosisSize(); //provisory size at mitosis as defined in the class
    
            // #Setting the settings# //
    
            void SetGarbageUnits(double numberGarbageunits);
    
    
private:
    
    /* ##Attributes## */
    
    /* 1.Chemico-physical properties of the cell */
        //i.Membrane permeability
        double m_permeabilityCell;            //Parameter: as such, it is not subject to evolution
        //ii.Allometric coefficients for the efficiency of production (allometry production) and the greediness of basal needs
        double m_allometryProductionAlpha;    //Parameter: as such, it is not subject to evolution
        double m_allometryBasalAlpha;         //Parameter: as such, it is not subject to evolution
        //iii.Conversion rate between Nutrient and Product or By-product
        double m_etaNutrientToEnergy;
        double m_etaNutrientToGarbage;
        //iv.Cost of protein production
        int m_metaboliteCost[3];
        //v.Duration of DNA replication
        int m_synthesisDuration;
    
    /* 2.Transcripts dynamics */
        //i.Transcription rates
        double m_tauGrowthGeneTranscription;//Need to be defined specifically by the intertwining between TF and BS
        double m_tauMaintenanceGeneTranscription;
        double m_tauPublicGoodsGeneTranscription;//+ function to pick randomly degradation
        //ii.Degradation rate
        double m_tauDegradationTranscript;
    
    /* 3.Proteins dynamics */
        //i.Traduction rate
        double m_tauTraduction;
        //ii.Degradation rate
        double m_tauDegradationProtein;
    
    /* 4.Dynamical physical features */
        //i.Size of the cell
        double m_volumeCell;
        //ii.Current time since DNA synthesis beginning
        int m_timeSinceSynthesisBeginning;
    
    /* 5.Content of the cell */
        //i.Energetic content
        int m_numberNutrientUnits;
        int m_numberEnergyUnits;
        //ii.By-product content: garbage
        long int m_numberGarbageUnits;
        //iii.Transcripts content
        int m_numberGrowthTranscripts;
        int m_numberMaintenanceTranscripts;
        int m_numberPublicGoodsTranscripts;
        int m_numberOtherTranscripts [10];
        //iv.Proteins content
        int m_numberGrowthProteins;
        int m_numberMaintenanceProteins;
        int m_numberPublicGoodsProteins;
        int m_numberOtherProteins [10];
        //iv.Maintenance metabolite content
        int m_numberMaintenanceMetabolites;
        int m_numberPublicGoodsMetabolites;
    
    /* 6.Genetics */
        double m_volumeProportionDescendant;
        double m_garbageProportionDescendant;
        //Provisory: need to be defined by genes
        double m_volumeCellMitosis;
    
    /* 7.Random generator */
        gsl_rng * rnd;//(pseudo) random number used in the processing for the diferent draws.
};

    /* ###Generic functions### */

        /* #Conversion of a volume into a surface area# */
        double VtoSAconversion(double V_cell);

        /* #Conversion of a surface area into a volume# */
        double SAtoVconversion(double SA_cell);

        /* #Calculus of a concentration for a molecule in a given cell# */
        long double ConcentrationCalculus(long int MoleculeNumber, double CellVolume);

        /* #Proportion calculus of a given type entity among all the similar entities regardless of their type# */
        double Proportion(double sub, double total);

#endif /* Cell_hpp */
