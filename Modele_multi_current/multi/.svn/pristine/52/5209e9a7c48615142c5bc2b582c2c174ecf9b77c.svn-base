//
//  main.cpp
//  Cell_Evolution
//
//  Created by Florian on 16/02/2018.
//  Copyright Â© 2018 Florian. All rights reserved.
//


#include "Ecosystem.hpp"

using namespace std;

int main() {
    
    // Generation of 14 regulatory sequences //
    int lengthRegulatorySequences(1000);
    int lengthBindingSites(8);
    const int numberTF=10;
    const int numberSequence=14;
    string sequence1[numberSequence];
    string bindingsite1[numberTF];
    int simulationNumber(1);
    gsl_rng *Random=gsl_rng_alloc(gsl_rng_default);
    gsl_rng_set(Random, simulationNumber);
    for (int seq=0;seq<numberSequence;seq++){
        for(int pos=0;pos<lengthRegulatorySequences;pos++){
            int drawResult=gsl_ran_flat(Random, 0, 4);
            if (drawResult<1){
                sequence1[seq].push_back('A');
            }
            else if (drawResult<2){
                sequence1[seq].push_back('C');
            }
            else if (drawResult<3){
                sequence1[seq].push_back('G');
            }
            else{
                sequence1[seq].push_back('T');
            }
        }
    }
    for (int TFnumber=0;TFnumber<numberTF;TFnumber++){
        for(int pos=0;pos<lengthBindingSites;pos++){
            int drawResult=gsl_ran_flat(Random, 0, 4);
            if (drawResult<1){
                bindingsite1[TFnumber].push_back('A');
            }
            else if (drawResult<2){
                bindingsite1[TFnumber].push_back('C');
            }
            else if (drawResult<3){
                bindingsite1[TFnumber].push_back('G');
            }
            else{
                bindingsite1[TFnumber].push_back('T');
            }
        }
    }
        
    // Initialization of the objects //
        
    Medium medium1(600,100,1);
    Compartiment compa1_1(pow(10,3), pow(10,3), 0, 5);
    Compartiment compa1_2(0, 100, 10, 5);//Concentrations in
    Compartiment compa1_3(0,0,1000,0);
    Cell cell1;
    PhysiologicalAllele growthallele1(sequence1[0],1,true);
    PhysiologicalAllele maintenanceallele1(sequence1[1],1,true);
    PhysiologicalAllele publicgoodsallele1(sequence1[2],1,true);
    PhysiologicalAllele cellsizer1(sequence1[3],1,true);
    std::vector <RegulatoryAllele> transcriptionfactors1;
    
    for (int TFnumber=0;TFnumber<10;TFnumber++){
        RegulatoryAllele randomTranscriptionFactor(sequence1[TFnumber],1,bindingsite1[TFnumber],1);
        transcriptionfactors1.push_back(randomTranscriptionFactor);
    }
        //
    
    transcriptionfactors1[0].PrintRegulatoryAllele();
    //cout << sequence1 << endl;
    
    //compa1.PrintState();
    
    double delta_t(1);
    
    //cell1.PrintCell();
    
    DonutPuddle donutpuddle1(simulationNumber,100,delta_t,pow(10,2),3,3,compa1_1,compa1_2,5,cell1);
    
    //FinitePuddle finitepuddle1(simulationNumber,1000,1,pow(10,4),3,3,compa1,compa2,3,cell1);
    //SeabedPuddle seabedpuddle1(1000,1,pow(10,4),10,10,compa1,compa2,compa3);
    
    donutpuddle1.PrintPuddle();
    //finitepuddle1.PrintPuddle();
    //seabedpuddle1.PrintPuddle(true);
    
    for (int t=1;t<=2;t++)
    {
        donutpuddle1.TimeStepInsidePuddle(delta_t);
        donutpuddle1.DiffusionBetweenCompartments();
    }
    
    donutpuddle1.PrintPuddle();
 
    /*
    for (int t=1;t<=3600*10;t++)
    {
    donutpuddle1.DiffusionBetweenCompartments();
    
    //seabedpuddle1.DiffusionBetweenCompartments();
    }
    donutpuddle1.PrintPuddle(false);
    //finitepuddle1.PrintPuddle(false);
    //seabedpuddle1.PrintPuddle(true);
     */
    gsl_rng_free(Random);
}


    


