//
//  main.cpp
//  Cell_Evolution
//
//  Created by Florian on 16/02/2018.
//  Copyright © 2018 Florian. All rights reserved.
//


#include "Ecosystem.hpp"

using namespace std;

int main() {
    
    // Generation of 20 regulatory sequences corresponding to 16 TF genes and 4 physiological genes//
    bool sizerCycleRegulation(true);
    int lengthRegulatorySequences(1000);
    int lengthBindingSites(8);
    const int numberTF=16;
    int numberTrait;
    if (sizerCycleRegulation){
        numberTrait=4;
    }
    else{
        numberTrait=3;
    }
    const int numberSequence=numberTF+numberTrait;
    string sequence[numberSequence];
    string bindingsite[numberTF];
    int simulationNumber(2);
    gsl_rng *Random=gsl_rng_alloc(gsl_rng_default);
    gsl_rng_set(Random, simulationNumber);
    for (int seq=0;seq<numberSequence;seq++){ //ETIENNE: OK; pourrait étre simplifié avec un char[4]={'A', 'T', ...} et gsl_ran_choose; drawResult pourrait être défini en dehors de la boucle
        for(int pos=0;pos<lengthRegulatorySequences;pos++){
            int drawResult=gsl_ran_flat(Random, 0, 4);
            if (drawResult<1){
                sequence[seq].push_back('A');
            }
            else if (drawResult<2){
                sequence[seq].push_back('C');
            }
            else if (drawResult<3){
                sequence[seq].push_back('G');
            }
            else{
                sequence[seq].push_back('T');
            }
        }
    }
    for (int TFnumber=0;TFnumber<numberTF;TFnumber++){
        for(int pos=0;pos<lengthBindingSites;pos++){
            int drawResult=gsl_ran_flat(Random, 0, 4);
            if (drawResult<1){
                bindingsite[TFnumber].push_back('A');
            }
            else if (drawResult<2){
                bindingsite[TFnumber].push_back('C');
            }
            else if (drawResult<3){
                bindingsite[TFnumber].push_back('G');
            }
            else{
                bindingsite[TFnumber].push_back('T');
            }
        }
    }
    
    //Redefinition of the first gene(Growth) in order to fix a starting genotype from pre-simulation
    
    sequence[0].replace(0,bindingsite[4].length(),bindingsite[4]);
    sequence[1].replace(150,bindingsite[2].length(),bindingsite[2]);
    sequence[1].replace(250,bindingsite[2].length(),bindingsite[2]);
    sequence[5].replace(250,bindingsite[2].length(),bindingsite[2]);
    sequence[7].replace(150,bindingsite[2].length(),bindingsite[2]);
    sequence[9].replace(250,bindingsite[2].length(),bindingsite[2]);
    sequence[10].replace(250,bindingsite[2].length(),bindingsite[2]);
    sequence[6].replace(250,bindingsite[2].length(),bindingsite[2]);
    
    
    /* Initialization of the objects in the simulations */
    
    //1.Medium definition//
    double nutrientDiffusivity (2*pow(10,-7));
    double publicGoodsDiffusivity (pow(10,-8));
    double cellDiffusivity (pow(10,-9));
    Medium medium(nutrientDiffusivity,publicGoodsDiffusivity,cellDiffusivity); //Diffusion coefficients of the medium; order: Nutrients, Public Goods, Cells
    
    //2.Compartments definition//
    double lengthEnvironment(pow(10,-2));
    double widthEnvironment(pow(10,-2));
    double heightEnvironmment(pow(10,-2));
    int lengthNumberCompartment(1);
    double lengthCompartment=lengthEnvironment/lengthNumberCompartment;
    int widthNumberCompartment=widthEnvironment/lengthCompartment;
    double standardNutrientConcentration(pow(10,-7));
    double hiddenNutrientConcentration(pow(10,-7));
    double revealedNutrientConcentration(0);
    double publicGoodsConcentration(0);
    
    Compartiment InsideCompartment(lengthCompartment,heightEnvironmment,standardNutrientConcentration,hiddenNutrientConcentration,revealedNutrientConcentration,publicGoodsConcentration,medium);//Concentrations in mol.L^(-1); order: Standard Nutrient, Hidden Nutrient, Revealed Nutrient, Common Goods
    Compartiment UpperOutsideCompartment(lengthCompartment,heightEnvironmment,standardNutrientConcentration,hiddenNutrientConcentration,revealedNutrientConcentration,publicGoodsConcentration,medium);//Concentrations in mol.L^(-1) ; order: same as above
    Compartiment LateralOutsideCompartment(lengthCompartment,heightEnvironmment,standardNutrientConcentration,hiddenNutrientConcentration,revealedNutrientConcentration,publicGoodsConcentration,medium);//Concentrations in mol.L^(-1); order: same as above

    //3.Alleles definition//
    double physiologicalMutationRate(pow(10,-1));
    double regulatoryMutationRate(pow(10,-3));
    bool geneEfficiency(true);
    
        //i)Physiological alleles//
    PhysiologicalAllele growthallele(sequence[0],physiologicalMutationRate,geneEfficiency,Random);          //sequence should result from pre-simulation, mutation rate as a variable parameter.
    PhysiologicalAllele maintenanceallele(sequence[1],physiologicalMutationRate,geneEfficiency,Random);     //sequence should result from pre-simulation, mutation rate as a variable parameter.
    PhysiologicalAllele publicgoodsallele(sequence[2],physiologicalMutationRate,geneEfficiency,Random);     //sequence should result from pre-simulation, mutation rate as a variable parameter.
    
    std::vector <RegulatoryAllele> positivetranscriptionfactors;               //vector of positive regulatory alleles
    std::vector <RegulatoryAllele> negativetranscriptionfactors;               //vector of negative regulatory alleles
    
        //ii)Regulatory alleles//
    for (int TFnumber=0;TFnumber<numberTF/2;TFnumber++){
        RegulatoryAllele randompositiveTranscriptionFactor(sequence[TFnumber+numberTrait],regulatoryMutationRate,Random,bindingsite[TFnumber],'A');
        RegulatoryAllele randomnegativeTranscriptionFactor(sequence[TFnumber+numberTrait+numberTF/2],regulatoryMutationRate,Random,bindingsite[TFnumber+numberTF/2],'R');
        positivetranscriptionfactors.push_back(randompositiveTranscriptionFactor);
        negativetranscriptionfactors.push_back(randomnegativeTranscriptionFactor);
    }
    
        //iii)Genome assemblage and sizer mechanisms definition (artificial or in the RGN)//
    map <string,PhysiologicalAllele> physiologicalInitialAlleles;
    physiologicalInitialAlleles.insert(pair<string,PhysiologicalAllele>("Growth",growthallele));               //allele encoding growth protein
    physiologicalInitialAlleles.insert(pair<string,PhysiologicalAllele>("Maintenance",maintenanceallele));     //allele encoding maintenance protein
    physiologicalInitialAlleles.insert(pair<string,PhysiologicalAllele>("Public Goods",publicgoodsallele));    //allele encoding public goods protein
    double volumeMutationRate(0);
    if (sizerCycleRegulation){
        PhysiologicalAllele cellsizer(sequence[3],physiologicalMutationRate,geneEfficiency,Random);             //sequence should result from pre-simulation, mutation rate as a variable parameter.
        physiologicalInitialAlleles.insert(pair<string,PhysiologicalAllele>("Cell sizer",cellsizer));              //allele encoding sizer protein
    }
    else{
        volumeMutationRate=(physiologicalMutationRate);
    }
    
    //4.Trait costs//
    map <string,int> metabolitesCost;
    double growthCost(10000);
    double maintenanceCost(1000);
    double cooperationCost(100);
    metabolitesCost.insert(pair<string,int>("Growth",growthCost));
    metabolitesCost.insert(pair<string,int>("Maintenance",maintenanceCost));
    metabolitesCost.insert(pair<string,int>("Public Goods",cooperationCost));
    
    
    
    //5. Cell definition//
    double K_on(pow(10,2));
    double K_off(pow(10,3));
    double cellPermeability(5*pow(10,4));
    double allometryProductionAlpha(1);
    double allometryBasalAlpha(1.25);
    double stoechiometryNutrienttoGarbage(1);
    double minimumSynthesisDuration(1500);
    double tauTranscriptionOncePolymeraseBound(0.1);
    double basalBindingProbabilityPolymerase(0.01);
    double enhancedBindingProbabilityPolymerase(0.5);
    double tauTraduction(0.1);
    double tauDegradationTranscript(0.001);
    double tauDegradationProtein(0.0005);
    double SAcalibration(1);
    double ATPexpensesCalibration(pow(10,5));
    double initialCellVolume(30);
    double volumeProportionDescendant(0.5);
    double garbageProportionDescendant(0.5);
    double volumeCellMitosis(50);
    double sizerConcentrationThreshold(0.1);
    string cellCycleType("GSM");
    
    Cell cell(K_on,                     //K_on BSTF
               K_off,                     //K_off BSTF
               cellPermeability,                    //permeabilityCell (unit: micrometer.s^-1, corresponds to estimated oxygen permeability)
               allometryProductionAlpha,                              //allometryProductionAlpha (not subject to sensitivity study: means that energy production is strictly proportional to nutrient uptake
               allometryBasalAlpha,                           //allometryBasalAlpha (subject to sensitivity study, from 1 to 1.5)
               stoechiometryNutrienttoGarbage,                              //etaNutrientToGarbage  (number of garbage produced by the conversion of one nutrient)
               minimumSynthesisDuration,                           //synthesisDuration    (duration of DNA synthesis) useless now
               tauTranscriptionOncePolymeraseBound,                            //tauTranscriptionOncePolymeraseBound  (transcription rate once polymerase is bound: acknowledged as a constant, cf. Bio by the number)
               basalBindingProbabilityPolymerase,                           //basalBindingProbabilityPolymerase   (polymerase binding probability without the help of an enhancer: chosen such that the complete range of values from 0 to maximum transcription rate can occur)
               enhancedBindingProbabilityPolymerase,                            //enhancedBindingProbabilityPolymerase (polymerase binding probability wuth the help of an enhancer: chosen such that the maximum transcription rate described in litterature can occur)
               tauTraduction,                            //tauTraduction (translation rate according to scientific litterature, cf. Bio. by the numbers, for one ribosome: generally more than one can be actively translating a single mRNA, function of the energy as a result of the basal metabolism investment (which is only depending on the volume here, not subject to any evolutionary process))
               tauDegradationTranscript,                          //tauDegradationTranscript (mRNA degradation rate according to scientific litterature, cf. Bio. by the numbers)
               tauDegradationProtein,                         //tauDegradationProtein  (protein degradation rate according to scientific litterature, cf. Bio. by the numbers)
               metabolitesCost,                //metabolites cost  (cost of producing each metabolite in terms of energy units: subject to wide sensitivity study because few knowledge in the litterature)
               SAcalibration,                              //Surface Area used for basal metabolism calibration
               ATPexpensesCalibration,                      //ATP expenses for the Surface Area used in calibration
               initialCellVolume,                             //cellVolume  (square micrometers)
               volumeProportionDescendant,                            //volumeProportionDescendant (percentage: subject to sensitivity study because we intuit that it could influence differentiation by increasing noise
               garbageProportionDescendant,                            //garbageProportionDescendant (percentage: not used in the first models)
               volumeCellMitosis,                            //volumeCellMitosis  (unused parameter: served at the beginning to parameterize the models)
               volumeMutationRate,
               sizerConcentrationThreshold,                              //sizerThreshold   (concentration threshold allowing to progress in the cycle cycle towards DNA replication)
               cellCycleType,                          //type of cell cycle
               physiologicalInitialAlleles,
               positivetranscriptionfactors,
               negativetranscriptionfactors
               );
    
    //
    double delta_t(1);
    double initialCellNumbers(100);
    int timeStepRatio(5);
    
    DonutPuddle donutpuddle(simulationNumber,     //seed initialization
                            sizerCycleRegulation, //set the mechanism of cell division and the resulting process of cell division size mutation
                            delta_t,              //timestep used in the simulation
                            lengthCompartment,            //length of the compartment (unit decimeters, cubic shape)
                            timeStepRatio,
                            lengthNumberCompartment,                   //length of the ecosystem (unit: number of compartment)
                            widthNumberCompartment,                   //width of the ecosystem (unit: number of compartment)
                            InsideCompartment,             //puddle inside compartment
                            UpperOutsideCompartment,             //puddle outside compartment
                            initialCellNumbers,                    //initial number of cells
                            cell);               //initial cells in the simulation
    
    
    
    double T_simu(100);
    int simu_stepNumber=T_simu/delta_t;
    int t_int=1;
    int t_int_print=1;
    donutpuddle.PrintPuddle();
    for (int t=1;t<=simu_stepNumber;t++)
    {
        donutpuddle.TimeStepInsidePuddle(t,delta_t);
        donutpuddle.DiffusionBetweenCompartments();
        if (t==t_int){
            cout << "Pas de temps n°: " << t << endl;
            
            t_int+=T_simu/(1000*delta_t);
            if (t==t_int_print){
            //donutpuddle.PrintPuddle();
                t_int_print+=T_simu/(5*delta_t);
            }
            cout << endl << endl;
            cout << "Pas de temps n°: " << t << endl;
            
        }
    }
    donutpuddle.PrintPuddle();
    gsl_rng_free(Random);
}


    


