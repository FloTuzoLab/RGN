//
//  main.cpp
//  Cell_Evolution
//
//  Created by Florian on 16/02/2018.
//  Copyright © 2018 Florian. All rights reserved.
//


#include "Ecosystem.hpp"

using namespace std;

int main() {
    
    // Generation of 14 regulatory sequences //
    int lengthRegulatorySequences(1000);
    int lengthBindingSites(8);
    const int numberTF=10;
    const int numberSequence=14;
    string sequence1[numberSequence];
    string bindingsite1[numberTF];
    int simulationNumber(2);
    gsl_rng *Random=gsl_rng_alloc(gsl_rng_default);
    gsl_rng_set(Random, simulationNumber);
    for (int seq=0;seq<numberSequence;seq++){
        for(int pos=0;pos<lengthRegulatorySequences;pos++){
            int drawResult=gsl_ran_flat(Random, 0, 4);
            if (drawResult<1){
                sequence1[seq].push_back('A');
            }
            else if (drawResult<2){
                sequence1[seq].push_back('C');
            }
            else if (drawResult<3){
                sequence1[seq].push_back('G');
            }
            else{
                sequence1[seq].push_back('T');
            }
        }
    }
    for (int TFnumber=0;TFnumber<numberTF;TFnumber++){
        for(int pos=0;pos<lengthBindingSites;pos++){
            int drawResult=gsl_ran_flat(Random, 0, 4);
            if (drawResult<1){
                bindingsite1[TFnumber].push_back('A');
            }
            else if (drawResult<2){
                bindingsite1[TFnumber].push_back('C');
            }
            else if (drawResult<3){
                bindingsite1[TFnumber].push_back('G');
            }
            else{
                bindingsite1[TFnumber].push_back('T');
            }
        }
    }
    //Redefinition of the first gene(Growth) in order to test and to be sure that it has binding sites for transcription factors.
    
    sequence1[0].replace(0,bindingsite1[0].length(),bindingsite1[0]);
    sequence1[0].replace(125,bindingsite1[0].length(),bindingsite1[0]);
    sequence1[1].replace(150,bindingsite1[8].length(),bindingsite1[7]);
    sequence1[7].replace(300,bindingsite1[9].length(),bindingsite1[8]);
    
        
    // Initialization of the objects //
        
    Medium medium1(600,100,1);
    Compartiment compa1_1(5, 0, 0, 0);
    Compartiment compa1_2(20, 100, 0, 0);//Concentrations in
    Compartiment compa1_3(0,0,1000,0);
    
    PhysiologicalAllele growthallele1(sequence1[0],0.001,true,Random);
    PhysiologicalAllele maintenanceallele1(sequence1[1],0.001,true,Random);
    PhysiologicalAllele publicgoodsallele1(sequence1[2],0.001,true,Random);
    PhysiologicalAllele cellsizer1(sequence1[3],0.01,true,Random);
    std::vector <RegulatoryAllele> positivetranscriptionfactors1;
    std::vector <RegulatoryAllele> negativetranscriptionfactors1;
    
    for (int TFnumber=0;TFnumber<5;TFnumber++){
        RegulatoryAllele randompositiveTranscriptionFactor(sequence1[TFnumber+4],0.001,Random,bindingsite1[TFnumber],'A');
        RegulatoryAllele randomnegativeTranscriptionFactor(sequence1[TFnumber+9],0.001,Random,bindingsite1[TFnumber+5],'R');
        positivetranscriptionfactors1.push_back(randompositiveTranscriptionFactor);
        negativetranscriptionfactors1.push_back(randomnegativeTranscriptionFactor);
    }
    
    positivetranscriptionfactors1[0].PrintRegulatoryAllele();
        //
    //cellsizer1.BSTFMatchCount(transcriptionfactors1[8]);
    
    //positivetranscriptionfactors1[2].PrintRegulatoryAllele();
    //cout << sequence1 << endl;
    map <string,int> metabolitesCost;
    metabolitesCost.insert({pair<string,int>("Growth",1),pair<string,int>("Maintenance",100),pair<string,int>("Public Goods",1)});
    
    map <string,PhysiologicalAllele> physiologicalInitialAlleles;
    physiologicalInitialAlleles.insert(
    {pair<string,PhysiologicalAllele>("Growth",growthallele1),
     pair<string,PhysiologicalAllele>("Maintenance",maintenanceallele1),
     pair<string,PhysiologicalAllele>("Public Goods",publicgoodsallele1),
     pair<string,PhysiologicalAllele>("Cell sizer",cellsizer1)
    });
    
    Cell cell1(pow(10,-1),
               pow(10,-2),
               pow(10,2),                      //permeabilityCell
               1,                               //allometryProductionAlpha
               1.25,                               //allometryBasalAlpha
               1,                               //etaNutrientToGarbage
               1500,                             //synthesisDuration
               0.1,                             //tauTranscriptionOncePolymeraseBound
               0.05,                             //basalBindingProbabilityPolymerase
               0.5,                               //enhancedBindingProbabilityPolymerase
               0.05,                               //tauTraduction
               0.0005,                            //tauDegradationTranscript
               0.0005,                            //tauDegradationProtein
               metabolitesCost,                      //metabolites cost
               100,                             //cellVolume
               0.5,                            //volumeProportionDescendant
               0.5,                            //garbageProportionDescendant
               500,                            //volumeCellMitosis
               0.001,                              //sizerThreshold
               physiologicalInitialAlleles,
               positivetranscriptionfactors1,
               negativetranscriptionfactors1
               );
    
    double delta_t(1);
    
    DonutPuddle donutpuddle1(simulationNumber,delta_t,pow(10,2),5,5,compa1_1,compa1_2,5,cell1);
    
    //FinitePuddle finitepuddle1(simulationNumber,1,pow(10,4),3,3,compa1,compa2,3,cell1);
    //SeabedPuddle seabedpuddle1(1,1,pow(10,4),10,10,compa1,compa2,compa3);
    
    donutpuddle1.PrintPuddle();
    //finitepuddle1.PrintPuddle();
    //seabedpuddle1.PrintPuddle(true);
    
    
    double T_simu=100000;
    int simu_stepNumber=T_simu/delta_t;
    int t_int=0;
    for (int t=0;t<=simu_stepNumber;t++)
    {
        donutpuddle1.TimeStepInsidePuddle(delta_t);
        donutpuddle1.DiffusionBetweenCompartments();
        
        if (t==t_int){
            cout << "Pas de temps n°: " << t << endl << endl;
            donutpuddle1.PrintPuddle();
            cout << endl;
            t_int+=500;
        }
    }
    
    donutpuddle1.PrintPuddle();
 
    /*
    for (int t=1;t<=3600*10;t++)
    {
    donutpuddle1.DiffusionBetweenCompartments();
    
    //seabedpuddle1.DiffusionBetweenCompartments();
    }
    donutpuddle1.PrintPuddle(false);
    //finitepuddle1.PrintPuddle(false);
    //seabedpuddle1.PrintPuddle(true);
     */
    gsl_rng_free(Random);
}


    


