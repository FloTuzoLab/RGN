//
//  Allele.cpp
//  Cell_Evolution
//
//  Created by Florian on 19/03/2018.
//  Copyright Â© 2018 Florian. All rights reserved.
//

#include "Allele.hpp"

using namespace std;

/* ##Generic features of an allele object## */

// #Default constructor not implemented with the random simulation number# //
Allele::Allele():
                m_mutationRate(pow(10,-6))
{
    for (int position=0;position<=999;position++){
        m_regulatorySequence.push_back('A');
    }
}

Allele::Allele(std::string regulatorySequence,double mutationRate):
    m_mutationRate(mutationRate)
{
    //rnd=randomSimulation;
    for (int position=0;position<=999;position++){
        m_regulatorySequence.push_back(regulatorySequence[position]);
    }
}

Allele::Allele(const Allele& m_allele):m_mutationRate(m_allele.m_mutationRate)
{
    //rnd=randomSimulation;
    for (int position=0;position<=999;position++){
        m_regulatorySequence[position]=m_allele.m_regulatorySequence[position];
    }
}

// #Destructor# //
Allele::~Allele()
{
    //Useless here
}


// #Operators# //

// Operator = //
void Allele::operator=(const Allele& m_allele)
{
    m_mutationRate=m_allele.m_mutationRate;
    for (int position=0;position<=999;position++){
        m_regulatorySequence[position]=m_allele.m_regulatorySequence[position];
    }
}

// #Other methods# //

// Printing function //
void Allele::PrintAllele()
{
    cout << "Mutation rate:" << m_mutationRate << endl;
    cout << "Regulatory sequence:" << endl << m_regulatorySequence << endl;
}

// Testing the match between a portion of sequence and the binding-site of a transcription factor //

/* ##Specific features of a physiological allele object## */

/* Constructor */

PhysiologicalAllele::PhysiologicalAllele()
{
}

PhysiologicalAllele::PhysiologicalAllele(std::string regulatorySequence,
                                         double mutationRate,
                                         bool efficiencyGene):
Allele(regulatorySequence,mutationRate)
{
    m_efficiencyGene=efficiencyGene;
}

PhysiologicalAllele::PhysiologicalAllele(const PhysiologicalAllele& m_physiologicalAllele)
{
    m_mutationRate=m_physiologicalAllele.m_mutationRate;
    m_regulatorySequence=m_physiologicalAllele.m_regulatorySequence;
    m_efficiencyGene=m_physiologicalAllele.m_efficiencyGene;
}

void PhysiologicalAllele::operator=(const PhysiologicalAllele& m_physiologicalAllele)
{
    m_mutationRate=m_physiologicalAllele.m_mutationRate;
    m_regulatorySequence=m_physiologicalAllele.m_regulatorySequence;
    m_efficiencyGene=m_physiologicalAllele.m_efficiencyGene;
}


/* ##Specific features of a regulatory allele object## */

/* Constructor */

RegulatoryAllele::RegulatoryAllele()
{
}

RegulatoryAllele::RegulatoryAllele(std::string regulatorySequence,
                                   double mutationRate,
                                   std::string bindingSequence,
                                   char regulationEffect):
Allele(regulatorySequence,mutationRate),
m_regulationEffect(regulationEffect)
{
    m_bindingSequence=bindingSequence;
}

RegulatoryAllele::RegulatoryAllele(const RegulatoryAllele& m_regulatoryAllele)
{
    m_regulationEffect=m_regulatoryAllele.m_regulationEffect;
    m_mutationRate=m_regulatoryAllele.m_mutationRate;
    m_regulatorySequence=m_regulatoryAllele.m_regulatorySequence;
    m_bindingSequence=m_regulatoryAllele.m_bindingSequence;
}

void RegulatoryAllele::operator=(const RegulatoryAllele& m_regulatoryAllele)
{
    m_regulationEffect=m_regulatoryAllele.m_regulationEffect;
    m_mutationRate=m_regulatoryAllele.m_mutationRate;
    m_regulatorySequence=m_regulatoryAllele.m_regulatorySequence;
    for (int position=0;position<8;position++){
        m_bindingSequence[position]=m_regulatoryAllele.m_bindingSequence[position];
    }
}

int RegulatoryAllele::BSTFMatchCount(const RegulatoryAllele& m_regulatoryAllele)
{
    int count = 0;
    size_t positionNumber = m_regulatorySequence.find(m_regulatoryAllele.m_bindingSequence, 0); // first occurrence
    while(positionNumber != string::npos)
    {
        count++;
        positionNumber = m_regulatorySequence.find(m_regulatoryAllele.m_bindingSequence, positionNumber + 1);
    }
    //cout << "count: " << count << endl;
    return (count);
}

int PhysiologicalAllele::BSTFMatchCount(const RegulatoryAllele& m_regulatoryAllele){
    int count = 0;
    size_t positionNumber = m_regulatorySequence.find(m_regulatoryAllele.m_bindingSequence, 0); // first occurrence
    while(positionNumber != string::npos)
    {
        count++;
        positionNumber = m_regulatorySequence.find(m_regulatoryAllele.m_bindingSequence, positionNumber + 1);
    }
    //cout << "count: " << count << endl;
    return (count);
}

char RegulatoryAllele::NatureOfEffect()
{
    return (m_regulationEffect);
}

void RegulatoryAllele::PrintRegulatoryAllele()
{
    PrintAllele();
    cout << "Binding-sequence recognised:" << endl << m_bindingSequence << endl;
    cout << "Nature de l'effet: " << m_regulationEffect << endl;
}

