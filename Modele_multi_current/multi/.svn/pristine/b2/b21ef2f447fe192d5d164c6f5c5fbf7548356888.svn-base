//
//  Ecosystem.cpp
//  Cell_Evolution
//
//  Created by Florian on 28/02/2018.
//  Copyright Â© 2018 Florian. All rights reserved.
//

#include "Ecosystem.hpp"

double OperatorFiniteDifferencesExplicit(double alpha, double c, int nbNeighbours, double n1,double n2,double n3,double n4,double n5,double n6){
    return(alpha*(n1+n2+n3+n4+n5+n6)+(1-nbNeighbours*alpha)*c);
}

/* ##Methods for the DonutPuddle class## */

// #Constructor# //

DonutPuddle::DonutPuddle(int simulationNumber,
                         double const lengthCompartment,
                         double delta_t,
                         double delta_l,
                         int lengthPuddle,                      //Length of the puddle (in compartment units)
                         int widthPuddle,                       //Width of the puddle (in copartment units)
                         Compartiment insideCompartment,        //Properties of a compartment in the puddle
                         Compartiment outsideCompartment,       //Properties of a compartment
                         int initialNumberCell,
                         Cell cell):

    Puddle(simulationNumber,
           lengthCompartment,
           delta_t,
           delta_l,
           lengthPuddle,
           widthPuddle,
           false,
           insideCompartment,
           outsideCompartment,
           initialNumberCell,
           cell)
    {
        m_neighbours=new int***[m_lengthInside+1];
        for (int i=1;i<=m_lengthInside;i++){
            m_neighbours[i]=new int**[m_widthInside+1];
            for (int j=1;j<=m_widthInside;j++){
                m_neighbours[i][j]=new int*[4];
                for (int k=0;k<=3;k++){
                    m_neighbours[i][j][k]=new int[2];
                }
            }
        }
    
        for (int i=1;i<=m_lengthInside;i++){
            
            for (int j=1;j<=m_widthInside;j++){
                
                //First neighbour
                if (i==1){
                    m_neighbours[i][j][0][0]=m_lengthInside;
                    m_neighbours[i][j][0][1]=j;
                }
                else{
                    m_neighbours[i][j][0][0]=i-1;
                    m_neighbours[i][j][0][1]=j;
                }
            
                //Second neighbour
                if (i==m_lengthInside){
                    m_neighbours[i][j][1][0]=1;
                    m_neighbours[i][j][1][1]=j;
                }
                else{
                    m_neighbours[i][j][1][0]=i+1;
                    m_neighbours[i][j][1][1]=j;
                }
            
                //Third neighbour
                if (j==1){
                    m_neighbours[i][j][2][0]=i;
                    m_neighbours[i][j][2][1]=m_widthInside;
                }
                else{
                    m_neighbours[i][j][2][0]=i;
                    m_neighbours[i][j][2][1]=j-1;
                }
            
                //Fourth neighbour
                if (j==m_widthInside){
                    m_neighbours[i][j][3][0]=i;
                    m_neighbours[i][j][3][1]=1;
                }
                else{
                    m_neighbours[i][j][3][0]=i;
                    m_neighbours[i][j][3][1]=j+1;
                }
            m_puddle[i][j].SetNeighboursRelationships(0, m_neighbours[i][j][0][0], m_neighbours[i][j][0][1]);
            m_puddle[i][j].SetNeighboursRelationships(1, m_neighbours[i][j][1][0], m_neighbours[i][j][1][1]);
            m_puddle[i][j].SetNeighboursRelationships(2, m_neighbours[i][j][2][0], m_neighbours[i][j][2][1]);
            m_puddle[i][j].SetNeighboursRelationships(3, m_neighbours[i][j][3][0], m_neighbours[i][j][3][1]);
            
            //Setting the spatio temporal diffusion coefficient for each of the molecules in each compartment.
            
        }
    }
}

//RAJON'S DONUT SEEMS TO BE CORRECTLY DEFINED. OH DEAR...//

void DonutPuddle::DiffusionBetweenCompartments()
{
    double conc[4][m_lengthInside+1][m_widthInside+1];
    
    //int neigh[4][2];//Only useful in the test version, based on the neighbours recovery//
    
    conc[0][0][0]=m_puddle[0][0].GetConcentrationNutrientStandard();
    
    conc[1][0][0]=m_puddle[0][0].GetConcentrationNutrientHidden();
    
    conc[2][0][0]=m_puddle[0][0].GetConcentrationNutrientRevealed();
    
    conc[3][0][0]=m_puddle[0][0].GetConcentrationCommonGoods();
    
    for (int i=1;i<=m_lengthInside;i++)
    {
        for (int j=1;j<=m_widthInside;j++)
            
        {
            //Setting the prior concentration for each of the molecule type.
            
            conc[0][i][j]=m_puddle[i][j].GetConcentrationNutrientStandard();
            
            conc[1][i][j]=m_puddle[i][j].GetConcentrationNutrientHidden();
            
            conc[2][i][j]=m_puddle[i][j].GetConcentrationNutrientRevealed();
            
            conc[3][i][j]=m_puddle[i][j].GetConcentrationCommonGoods();
        }
    }
    
    for (int i=1;i<=m_lengthInside;i++)
    {
        for (int j=1;j<=m_widthInside;j++)
            
        {
            
            double concNutStand(OperatorFiniteDifferencesExplicit(m_alphaDF[0],conc[0][i][j],5,conc[0][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[0][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[0][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[0][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[0][0][0],0));
            
            double concNutHid(OperatorFiniteDifferencesExplicit(m_alphaDF[1],conc[1][i][j],5,conc[1][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[1][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[1][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[1][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[1][0][0],0));
            
            double concNutRev(OperatorFiniteDifferencesExplicit(m_alphaDF[2],conc[2][i][j],5,conc[2][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[2][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[2][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[2][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[2][0][0],0));
            
            double concComGoo(OperatorFiniteDifferencesExplicit(m_alphaDF[3],conc[3][i][j],5,conc[3][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[3][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[3][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[3][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[3][0][0],0));
            
            m_puddle[i][j].SetConcentrationNutrientStandard(concNutStand);
            m_puddle[i][j].SetConcentrationNutrientHidden(concNutHid);
            m_puddle[i][j].SetConcentrationNutrientRevealed(concNutRev);
            m_puddle[i][j].SetConcentrationCommonGoods(concComGoo);
            }
            }
}
/*End of Donut methods*/

/*Methods for the FinitePuddle class*/

//Constructor//


FinitePuddle::FinitePuddle(int simulationNumber,
                           double const lengthCompartment, double delta_t,double delta_l, int lengthPuddle,int widthPuddle, Compartiment insideCompartment, Compartiment outsideCompartment, int initialNumberCell,Cell cell): Puddle(simulationNumber, lengthCompartment,delta_t, delta_l,lengthPuddle,widthPuddle,false,insideCompartment,outsideCompartment, initialNumberCell,cell)
{
    m_neighbours=new int***[m_lengthInside+1];
    for (int i=1;i<=m_lengthInside;i++)
    {
        m_neighbours[i]=new int**[m_widthInside+1];
        for (int j=1;j<=m_widthInside;j++)
        {
            m_neighbours[i][j]=new int*[4];
            for (int k=0;k<=3;k++)
            {
                m_neighbours[i][j][k]=new int[2];
            }
        }
    }
    
for (int i=1;i<=m_lengthInside;i++)
{
    for (int j=1;j<=m_widthInside;j++)
    {
        if (i==1)
        {
            m_neighbours[i][j][0][0]=i;
            m_neighbours[i][j][0][1]=j;
        }
        else
        {
            m_neighbours[i][j][0][0]=i-1;
            m_neighbours[i][j][0][1]=j;
        }
        
        if (i==m_lengthInside)
        {
            m_neighbours[i][j][1][0]=i;
            m_neighbours[i][j][1][1]=j;
        }
        else
        {
            m_neighbours[i][j][1][0]=i+1;
            m_neighbours[i][j][1][1]=j;
        }
        
        if (j==1)
        {
            m_neighbours[i][j][2][0]=i;
            m_neighbours[i][j][2][1]=j;
        }
        else
        {
            m_neighbours[i][j][2][0]=i;
            m_neighbours[i][j][2][1]=j-1;
        }
        
        if (j==m_widthInside)
        {
            m_neighbours[i][j][3][0]=i;
            m_neighbours[i][j][3][1]=j;
        }
        else
        {
            m_neighbours[i][j][3][0]=i;
            m_neighbours[i][j][3][1]=j+1;
        }
        m_puddle[i][j].SetNeighboursRelationships(0, m_neighbours[i][j][0][0], m_neighbours[i][j][0][1]);
        m_puddle[i][j].SetNeighboursRelationships(1, m_neighbours[i][j][1][0], m_neighbours[i][j][1][1]);
        m_puddle[i][j].SetNeighboursRelationships(2, m_neighbours[i][j][2][0], m_neighbours[i][j][2][1]);
        m_puddle[i][j].SetNeighboursRelationships(3, m_neighbours[i][j][3][0], m_neighbours[i][j][3][1]);
        
        //Setting the spatio temporal diffusion coefficient for each of the molecules in each compartment.
        
    }
}
 //Neighbours definition possibility, in order to check the accuracy of the diffusion//
}

void FinitePuddle::DiffusionBetweenCompartments()
{
        double conc[4][m_lengthInside+1][m_widthInside+1];
        
        //int neigh[4][2];//Only useful in the test version, based on the neighbours recovery//
        
        conc[0][0][0]=m_puddle[0][0].GetConcentrationNutrientStandard();
        
        conc[1][0][0]=m_puddle[0][0].GetConcentrationNutrientHidden();
        
        conc[2][0][0]=m_puddle[0][0].GetConcentrationNutrientRevealed();
        
        conc[3][0][0]=m_puddle[0][0].GetConcentrationCommonGoods();
        
        for (int i=1;i<=m_lengthInside;i++)
        {
            for (int j=1;j<=m_widthInside;j++)
                
            {
                //Setting the prior concentration for each of the molecule type.
                
                conc[0][i][j]=m_puddle[i][j].GetConcentrationNutrientStandard();
                
                conc[1][i][j]=m_puddle[i][j].GetConcentrationNutrientHidden();
                
                conc[2][i][j]=m_puddle[i][j].GetConcentrationNutrientRevealed();
                
                conc[3][i][j]=m_puddle[i][j].GetConcentrationCommonGoods();
            }
        }
    
    for (int i=1;i<=m_lengthInside;i++)
    {
        for (int j=1;j<=m_widthInside;j++)
            
        {
            
            double concNutStand(OperatorFiniteDifferencesExplicit(m_alphaDF[0],conc[0][i][j],5,conc[0][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[0][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[0][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[0][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[0][0][0],0));
            
            double concNutHid(OperatorFiniteDifferencesExplicit(m_alphaDF[1],conc[1][i][j],5,conc[1][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[1][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[1][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[1][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[1][0][0],0));
            
            double concNutRev(OperatorFiniteDifferencesExplicit(m_alphaDF[2],conc[2][i][j],5,conc[2][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[2][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[2][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[2][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[2][0][0],0));
            
            double concComGoo(OperatorFiniteDifferencesExplicit(m_alphaDF[3],conc[3][i][j],5,conc[3][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[3][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[3][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[3][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[3][0][0],0));
            
            m_puddle[i][j].SetConcentrationNutrientStandard(concNutStand);
            m_puddle[i][j].SetConcentrationNutrientHidden(concNutHid);
            m_puddle[i][j].SetConcentrationNutrientRevealed(concNutRev);
            m_puddle[i][j].SetConcentrationCommonGoods(concComGoo);
        }
    }
}
    

/*End of FinitePuddle class*/

/*Methods for PseudoInfinitePuddle (seabed) class*/

SeabedPuddle::SeabedPuddle(int simulationNumber, double const lengthCompartment, double delta_t,double delta_l, int lengthPuddle,int widthPuddle, Compartiment insideCompartment, Compartiment outsideCompartment, Compartiment lateralCompartment, int initialNumberCell,Cell cell): Puddle(simulationNumber,lengthCompartment,delta_t, delta_l,lengthPuddle,widthPuddle,true,insideCompartment,outsideCompartment, initialNumberCell,cell)
{
    for (int i=1;i<=m_lengthInside;i++)
    {
        m_puddle[i][0]=Compartiment(lateralCompartment);
        m_puddle[i][m_widthInside+1]=Compartiment(lateralCompartment);
    }
    
    for (int j=1;j<=m_widthInside;j++)
    {
        m_puddle[0][j]=Compartiment(lateralCompartment);
        m_puddle[m_lengthInside+1][j]=Compartiment(lateralCompartment);
    }
    
    m_neighbours=new int***[m_lengthInside+1];
    for (int i=1;i<=m_lengthInside;i++)
    {
        m_neighbours[i]=new int**[m_widthInside+1];
        for (int j=1;j<=m_widthInside;j++)
        {
            m_neighbours[i][j]=new int*[4];
            for (int k=0;k<=3;k++)
            {
                m_neighbours[i][j][k]=new int[2];
            }
        }
    }
    
    
    
    for (int i=1;i<=m_lengthInside;i++)
    {
        for (int j=1;j<=m_widthInside;j++)
        {
            
                m_neighbours[i][j][0][0]=i-1;
                m_neighbours[i][j][0][1]=j;
            
                m_neighbours[i][j][1][0]=i+1;
                m_neighbours[i][j][1][1]=j;
            
                m_neighbours[i][j][2][0]=i;
                m_neighbours[i][j][2][1]=j-1;
            
                m_neighbours[i][j][3][0]=i;
                m_neighbours[i][j][3][1]=j+1;
            
            m_puddle[i][j].SetNeighboursRelationships(0, m_neighbours[i][j][0][0], m_neighbours[i][j][0][1]);
            m_puddle[i][j].SetNeighboursRelationships(1, m_neighbours[i][j][1][0], m_neighbours[i][j][1][1]);
            m_puddle[i][j].SetNeighboursRelationships(2, m_neighbours[i][j][2][0], m_neighbours[i][j][2][1]);
            m_puddle[i][j].SetNeighboursRelationships(3, m_neighbours[i][j][3][0], m_neighbours[i][j][3][1]);
            
        }
    }
}

void SeabedPuddle::DiffusionBetweenCompartments()
{
    double conc[4][m_lengthInside+2][m_widthInside+2];
    
    for (int i=0;i<=m_lengthInside+1;i++)
    {
        for (int j=0;j<=m_widthInside+1;j++)
            
        {
            //Setting the prior concentration for each of the molecule type.
            
            conc[0][i][j]=m_puddle[i][j].GetConcentrationNutrientStandard();
            
            conc[1][i][j]=m_puddle[i][j].GetConcentrationNutrientHidden();
            
            conc[2][i][j]=m_puddle[i][j].GetConcentrationNutrientRevealed();
            
            conc[3][i][j]=m_puddle[i][j].GetConcentrationCommonGoods();
        }
    }
    
    
    for (int i=1;i<=m_lengthInside;i++)
    {
        for (int j=1;j<=m_widthInside;j++)
            
        {
            
            double concNutStand(OperatorFiniteDifferencesExplicit(m_alphaDF[0],conc[0][i][j],5,conc[0][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[0][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[0][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[0][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[0][0][0],0));
            
            double concNutHid(OperatorFiniteDifferencesExplicit(m_alphaDF[1],conc[1][i][j],5,conc[1][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[1][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[1][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[1][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[1][0][0],0));
            
            double concNutRev(OperatorFiniteDifferencesExplicit(m_alphaDF[2],conc[2][i][j],5,conc[2][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[2][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[2][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[2][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[2][0][0],0));
            
            double concComGoo(OperatorFiniteDifferencesExplicit(m_alphaDF[3],conc[3][i][j],5,conc[3][m_neighbours[i][j][0][0]][m_neighbours[i][j][0][1]],conc[3][m_neighbours[i][j][1][0]][m_neighbours[i][j][1][1]],conc[3][m_neighbours[i][j][2][0]][m_neighbours[i][j][2][1]],conc[3][m_neighbours[i][j][3][0]][m_neighbours[i][j][3][1]],conc[3][0][0],0));
            
            m_puddle[i][j].SetConcentrationNutrientStandard(concNutStand);
            m_puddle[i][j].SetConcentrationNutrientHidden(concNutHid);
            m_puddle[i][j].SetConcentrationNutrientRevealed(concNutRev);
            m_puddle[i][j].SetConcentrationCommonGoods(concComGoo);
        }
    }
}
